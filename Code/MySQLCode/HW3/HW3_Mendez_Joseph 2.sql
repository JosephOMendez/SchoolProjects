/**
SQL Query for HW 3
	Name - Joseph Mendez
	UTSA ID - qxo307
	Class - IS.6503.001
**/

--Q.65 -> Create EliteVideo tables
--Creation of PRICE table
CREATE TABLE PRICE (
PRICE_CODE CHAR(1) PRIMARY KEY,
PRICE_DESCRIPTION VARCHAR(15),
PRICE_RENTFEE NUMERIC(3,1),
PRICE_DAILYLATEFEE NUMERIC(2,1),
);

--Creation of MOVIE table
CREATE TABLE MOVIE (
MOVIE_NUM CHAR (4) PRIMARY KEY,
MOVIE_TITLE VARCHAR(30),
MOVIE_YEAR CHAR(4),
MOVIE_COST NUMERIC(5,2),
MOVIE_GENRE VARCHAR(7),
PRICE_CODE CHAR(1),
FOREIGN KEY (PRICE_CODE) REFERENCES PRICE(PRICE_CODE),
);

--Creation of VIDEO table
CREATE TABLE VIDEO (
VID_NUM CHAR(5) PRIMARY KEY,
VID_INDATE DATE,
MOVIE_NUM CHAR(4) NOT NULL
FOREIGN KEY (MOVIE_NUM) REFERENCES MOVIE(MOVIE_NUM),
);

--Creation of MEMBERSHIP table
CREATE TABLE MEMBERSHIP (
MEM_NUM CHAR(3) PRIMARY KEY,
MEM_FNAME VARCHAR(15),
MEM_LNAME VARCHAR(15),
MEM_STREET VARCHAR(25),
MEM_CITY VARCHAR(15),
MEM_STATE CHAR(2),
MEM_ZIP CHAR(5),
MEM_BALANCE int,
);

--Creation of RENTAL table
CREATE TABLE RENTAL (
RENT_NUM CHAR(4) PRIMARY KEY,
RENT_DATE DATE,
MEM_NUM CHAR(3) NOT NULL,
FOREIGN KEY (MEM_NUM) REFERENCES MEMBERSHIP(MEM_NUM),
);

--Creation of DETAILRENTAL table
CREATE TABLE DETAILRENTAL (
RENT_NUM CHAR(4) NOT NULL,
VID_NUM CHAR(5) NOT NULL,
DETAIL_FEE NUMERIC(2,1),
DETAIL_DUEDATE DATE,
DETAIL_RETURNDATE DATE,
DETAIL_DAILYLATEFEE CHAR(1),
PRIMARY KEY(RENT_NUM,VID_NUM),
FOREIGN KEY (RENT_NUM) REFERENCES RENTAL(RENT_NUM),
FOREIGN KEY (VID_NUM) REFERENCES VIDEO(VID_NUM),
);

--Q.66 -> INSERT commands for the tables created above
--PRICE
INSERT INTO PRICE VALUES (1, 'Standard', 2, 1);
INSERT INTO PRICE VALUES (2, 'New Release', 3.5, 3);
INSERT INTO PRICE VALUES (3, 'Discount', 1.5, 1);
INSERT INTO PRICE VALUES (4, 'Weekly Special', 1, .5);
--Select * FROM PRICE;

--MOVIE
INSERT INTO MOVIE VALUES (1234, 'The Cesar Family Christmas', 2011, 39.95, 'FAMILY', 2);
INSERT INTO MOVIE VALUES (1235, 'Smokey Mountain Wildlife', 2008, 59.95, 'ACTION', 1);
INSERT INTO MOVIE VALUES (1236, 'Richard Goodhope', 2012, 59.95, 'DRAMA', 2);
INSERT INTO MOVIE VALUES (1237, 'Beatnik Fever', 2011, 29.95, 'COMEDY', 2);
INSERT INTO MOVIE VALUES (1238, 'Constant Companion', 2012, 89.95, 'DRAMA', NULL);
INSERT INTO MOVIE VALUES (1239, 'Where Hope Dies', 2002, 25.49, 'DRAMA', 3);
INSERT INTO MOVIE VALUES (1245, 'Time to Burn', 2009, 45.49, 'ACTION', 1);
INSERT INTO MOVIE VALUES (1246, 'What He Doesn''t Know', 2010, 58.29, 'COMEDY', 1);
--Select * FROM MOVIE;

--VIDEO
INSERT INTO VIDEO VALUES (34341, '22-JAN-11', 1235);
INSERT INTO VIDEO VALUES (34342, '22-JAN-11', 1235);
INSERT INTO VIDEO VALUES (34366, '02-MAR-13', 1236);
INSERT INTO VIDEO VALUES (34367, '02-MAR-13', 1236);
INSERT INTO VIDEO VALUES (34368, '02-MAR-13', 1236);
INSERT INTO VIDEO VALUES (34369, '02-MAR-13', 1236);
INSERT INTO VIDEO VALUES (44392, '21-OCT-12', 1237);
INSERT INTO VIDEO VALUES (44397, '21-OCT-12', 1237);
INSERT INTO VIDEO VALUES (54321, '18-JUN-12', 1234);
INSERT INTO VIDEO VALUES (54324, '18-JUN-12', 1234);
INSERT INTO VIDEO VALUES (54325, '18-JUN-12', 1234);
INSERT INTO VIDEO VALUES (59237, '14-FEB-13', 1237);
INSERT INTO VIDEO VALUES (61353, '28-JAN-10', 1245);
INSERT INTO VIDEO VALUES (61354, '28-JAN-10', 1245);
INSERT INTO VIDEO VALUES (61367, '30-JUL-12', 1246);
INSERT INTO VIDEO VALUES (61369, '30-JUL-12', 1246);
INSERT INTO VIDEO VALUES (61388, '25-JAN-11', 1239);
/*
Select VID_NUM, FORMAT(VID_INDATE,N'dd"-"MMM"-"yy', 'en-US') as VID_INDATE,
MOVIE_NUM FROM VIDEO
ORDER BY MOVIE_NUM;
*/

--MEMBERSHIP
INSERT INTO MEMBERSHIP VALUES (102, 'TAMI', 'DAWSON', '2632 TAKLI CIRCLE', 'NORENE', 'TN', '37136', 11);
INSERT INTO MEMBERSHIP VALUES (103, 'CURT', 'KNIGHT', '4025 CORNELL COURT', 'FLATGAP', 'KY', '41219', 6);
INSERT INTO MEMBERSHIP VALUES (104, 'JAMAL', 'MELENDEZ', '788 EAST 145TH AVENUE', 'QUEBECK', 'TN', '38579', 0);
INSERT INTO MEMBERSHIP VALUES (105, 'IVA', 'MCCLAIN', '6045 MUSKET BALL CIRCLE', 'SUMMIT', 'KY', '42783', 15);
INSERT INTO MEMBERSHIP VALUES (106, 'MIRANDA', 'PARKS', '4469 MAXWELL PLACE', 'GERMANTOWN', 'TN', '38183', 0);
INSERT INTO MEMBERSHIP VALUES (107, 'ROSARIO', 'ELLIOTT', '7578 DANNER AVENUE', 'COLUMBIA', 'TN', '38402', 5);
INSERT INTO MEMBERSHIP VALUES (108, 'MATTIE', 'GUY', '4390 EVERGREEN STREET', 'LILY', 'KY', '40740', 0);
INSERT INTO MEMBERSHIP VALUES (109, 'CLINT', 'OCHOA', '1711 ELM STREET', 'GREENEVILLE', 'TN', '37745', 10);
INSERT INTO MEMBERSHIP VALUES (110, 'LEWIS', 'ROSALES', '4524 SOUTHWIND CIRCLE', 'COUNCE', 'TN', '38326', 0);
INSERT INTO MEMBERSHIP VALUES (111, 'STACY', 'MANN', '2789 EAST COOK AVENUE', 'MURFREESBORO', 'TN', '37132', 8);
INSERT INTO MEMBERSHIP VALUES (112, 'LUIS', 'TRUJILLO', '7267 MELVIN AVENUE', 'HEISKELL', 'TN', '37754', 3);
INSERT INTO MEMBERSHIP VALUES (113, 'MINNIE', 'GONZALES', '6430 VASILI DRIVE', 'WILLISTON', 'TN', '38076', 0);
--Select * FROM MEMBERSHIP;

--RENTAL
INSERT INTO RENTAL VALUES (1001, '01-MAR-13', 103);
INSERT INTO RENTAL VALUES (1002, '01-MAR-13', 105);
INSERT INTO RENTAL VALUES (1003, '02-MAR-13', 102);
INSERT INTO RENTAL VALUES (1004, '02-MAR-13', 110);
INSERT INTO RENTAL VALUES (1005, '02-MAR-13', 111);
INSERT INTO RENTAL VALUES (1006, '02-MAR-13', 107);
INSERT INTO RENTAL VALUES (1007, '02-MAR-13', 104);
INSERT INTO RENTAL VALUES (1008, '03-MAR-13', 105);
INSERT INTO RENTAL VALUES (1009, '03-MAR-13', 111);
/*
Select RENT_NUM, FORMAT(RENT_DATE,N'dd"-"MMM"-"yy', 'en-US') as RENT_DATE,
MEM_NUM FROM RENTAL;
*/

--DETAILRENTAL
INSERT INTO DETAILRENTAL VALUES (1001, 34342, 2, '04-MAR-13', '02-MAR-13', NULL);
INSERT INTO DETAILRENTAL VALUES (1001, 34366, 3.5, '04-MAR-13', '02-MAR-13', 3);
INSERT INTO DETAILRENTAL VALUES (1001, 61353, 2, '04-MAR-13', '03-MAR-13', 1);
INSERT INTO DETAILRENTAL VALUES (1002, 59237, 3.5, '04-MAR-13', '04-MAR-13', 3);
INSERT INTO DETAILRENTAL VALUES (1003, 54325, 3.5, '04-MAR-13', '09-MAR-13', 3);
INSERT INTO DETAILRENTAL VALUES (1003, 61369, 2, '06-MAR-13', '09-MAR-13', 1);
INSERT INTO DETAILRENTAL VALUES (1003, 61388, 0, '06-MAR-13', '09-MAR-13', 1);
INSERT INTO DETAILRENTAL VALUES (1004, 34341, 2, '07-MAR-13', '07-MAR-13', 1);
INSERT INTO DETAILRENTAL VALUES (1004, 34367, 3.5, '05-MAR-13', '07-MAR-13', 3);
INSERT INTO DETAILRENTAL VALUES (1004, 44392, 3.5, '05-MAR-13', '07-MAR-13', 3);
INSERT INTO DETAILRENTAL VALUES (1005, 34342, 2, '07-MAR-13', '05-MAR-13', 1);
INSERT INTO DETAILRENTAL VALUES (1005, 44397, 3.5, '05-MAR-13', '05-MAR-13', 3);
INSERT INTO DETAILRENTAL VALUES (1006, 34366, 3.5, '05-MAR-13', '04-MAR-13', 3);
INSERT INTO DETAILRENTAL VALUES (1006, 61367, 2, '07-MAR-13', NULL, 1);
INSERT INTO DETAILRENTAL VALUES (1007, 34368, 3.5, '05-MAR-13', NULL, 3);
INSERT INTO DETAILRENTAL VALUES (1008, 34369, 3.5, '05-MAR-13', '05-MAR-13', 3);
INSERT INTO DETAILRENTAL VALUES (1009, 54324, 3.5, '05-MAR-13', NULL, 3);
/*
Select RENT_NUM, VID_NUM, DETAIL_FEE,
FORMAT(DETAIL_DUEDATE,N'dd"-"MMM"-"yy', 'en-US') as DETAIL_DUEDATE,
FORMAT(DETAIL_RETURNDATE,N'dd"-"MMM"-"yy', 'en-US') as DETAIL_RETURNDATE,
DETAIL_DAILYLATEFEE FROM DETAILRENTAL;
*/

--Q.68 -> Code to change movie year for Movie_NUM 1245 to 2010
Select Movie_Year FROM MOVIE WHERE MOVIE_NUM = 1245;
UPDATE MOVIE SET MOVIE_YEAR = 2010 WHERE MOVIE_NUM = 1245;
Select Movie_Year FROM MOVIE WHERE MOVIE_NUM = 1245;

--Q.69 -> Code to change PRICE_CODE for all Action movies to 3
Select PRICE_CODE FROM MOVIE WHERE MOVIE_GENRE = 'Action';
UPDATE MOVIE SET PRICE_CODE = 3 WHERE MOVIE_GENRE = 'Action';
Select PRICE_CODE FROM MOVIE WHERE MOVIE_GENRE = 'Action';


--Q.70 -> Code to increase all PRICE_RentFee by $.50
Select PRICE_RENTFEE FROM PRICE;
UPDATE PRICE SET PRICE_RENTFEE = PRICE_RENTFEE + .50;
Select PRICE_RENTFEE FROM PRICE;


--Q.72 -> Code that displays MOVIE_TITLE, MOVIE_YEAR, and MOVIE_GENRE
Select MOVIE_TITLE, MOVIE_YEAR, MOVIE_GENRE FROM MOVIE;


--Q.73 -> Code that displays MOVIE_YEAR, MOVIE_TITLE, and MOVIE_COST
--	by MOVIE_YEAR in decending order
Select MOVIE_YEAR, MOVIE_TITLE, MOVIE_COST FROM MOVIE 
ORDER BY MOVIE_YEAR DESC;


--Q.74 -> Code that displays MOVIE_TITLE, MOVIE_YEAR, and MOVIE_GENRE
--	sorted by MOVIE_GENRE in ascending order, then sorted by MOVIE_YEAR
--	descending order within genre
Select MOVIE_TITLE, MOVIE_YEAR, MOVIE_GENRE FROM MOVIE
ORDER BY MOVIE_GENRE ASC, MOVIE_YEAR DESC;


--Q.75 -> Code that displays MOVIE_NUM, MOVIE_TITLE, and PRICE_CODE
--	for all movies with titles that start with "R"
Select MOVIE_NUM, MOVIE_TITLE, PRICE_CODE FROM MOVIE
WHERE LEFT(MOVIE_TITLE,1) = 'R';


--Q.76 -> Code that displays MOVIE_TITLE, MOVIE_YEAR, and MOVIE_COST for
--	all movies containing the word "hope" in the title. Sorted by
--	MOVIE_TITLE in ascending order
Select MOVIE_TITLE, MOVIE_YEAR, MOVIE_COST FROM MOVIE
WHERE MOVIE_TITLE LIKE '%hope%'
ORDER BY MOVIE_TITLE ASC;


--Q.77 -> Code that displays MOVIE_TITLE, MOVIE_YEAR, and MOVIE_GENRE for
--	all action movies
Select MOVIE_TITLE, MOVIE_YEAR, MOVIE_GENRE FROM MOVIE
WHERE MOVIE_GENRE = 'Action';


--Q.78 -> Code that displays MOVIE_NUM, MOVIE_TITLE, and MOVIE_COST for 
--	movies with MOVIE_COST > $40
Select MOVIE_NUM, MOVIE_TITLE, MOVIE_COST FROM MOVIE
WHERE MOVIE_COST > 40;


--Q.79 -> Code that displays MOVIE_NUM, MOVIE_TITLE, MOVIE_COST, and
--	MOVIE_GENRE for all movies that are either action or comedy and
--	cost less than $50
Select MOVIE_NUM, MOVIE_TITLE, MOVIE_COST, MOVIE_GENRE FROM MOVIE
WHERE (MOVIE_GENRE = 'Action' and MOVIE_COST < 50)
or (MOVIE_GENRE = 'Comedy' and MOVIE_COST < 50)
ORDER BY MOVIE_GENRE ASC;


--Q.80 -> Code that displays MOVIE_NUM, MOVIE_DESCRIPTION where the 
--	description is a combo of MOVIE_TITLE, MOVIE_YEAR in parenthesis, 
--	and MOVIE_GENRE
Select MOVIE_NUM, CONCAT(MOVIE_TITLE, ' ', CONCAT('(',MOVIE_YEAR,')'), ' ', MOVIE_GENRE)
as MOVIE_DESCRIPTION FROM MOVIE;


--Q.81 -> COde that displays MOVIE_GENRE and number of movies in each 
--	genre
Select MOVIE_GENRE, COUNT(MOVIE_GENRE) as NUMBER_OF_MOVIES FROM MOVIE
GROUP BY MOVIE_GENRE;


--Q.82 -> Code that dispays the average cost all MOVIE_COST entries
Select FORMAT(AVG(MOVIE_COST),'N4') as AVERAGE_MOVIE_COST FROM MOVIE;


--Q.83 -> Code that displays MOVIE_GEnRE and average of MOVIE_COST
--	for each genre
Select MOVIE_GENRE, FORMAT(AVG(MOVIE_COST),'N2') as AVERAGE_COST FROM MOVIE
GROUP BY MOVIE_GENRE;


--Q.84 -> Code that displays MOVIE_TITLE, MOVIE_GENRE, PRICE_DESCRIPTION
--	and PRICE_RENTFEE for all movies with a price code
Select MOVIE.MOVIE_TITLE, MOVIE.MOVIE_GENRE, PRICE.PRICE_DESCRIPTION, PRICE.PRICE_RENTFEE
FROM MOVIE
INNER JOIN PRICE ON MOVIE.PRICE_CODE = PRICE.PRICE_CODE
ORDER BY PRICE.PRICE_DESCRIPTION DESC;


--Q.85 -> Code that displays MOVIE_GENRE and average PRICE_RENTFEE
Select MOVIE.MOVIE_GENRE, FORMAT(ROUND(AVG(PRICE.PRICE_RENTFEE),2),'N2') as AVERAGE_RETAL_FEE
FROM MOVIE
INNER JOIN PRICE ON MOVIE.PRICE_CODE = PRICE.PRICE_CODE
GROUP BY MOVIE.MOVIE_GENRE;


--Q.86 -> Code that displays MOVIE_TITLE, MOVIE_YEAR,
--	and MOVIE_COST/PRICE_RENTFEE
Select MOVIE.MOVIE_TITLE, MOVIE.MOVIE_YEAR, FORMAT(ROUND((MOVIE.MOVIE_COST/PRICE.PRICE_RENTFEE),2),'N2')
as BREAKEVEN_RENTALS
FROM MOVIE
INNER JOIN PRICE ON MOVIE.PRICE_CODE = PRICE.PRICE_CODE;


--Q.87 -> Code that will display MOVIE_TITLE and MOVIE_YEAR for all
--	movies with a price code
Select MOVIE.MOVIE_TITLE, MOVIE.MOVIE_YEAR
FROM MOVIE
INNER JOIN PRICE ON MOVIE.PRICE_CODE = PRICE.PRICE_CODE;


--Q.88 -> Code that displays MOVIE_TITLE, MOVIE_YEAR, MOVIE_COST for movies
--	cost between $44.99 and $49.99
Select MOVIE_TITLE, MOVIE_YEAR, MOVIE_COST FROM MOVIE
WHERE MOVIE_COST BETWEEN 44.99 and 49.99;


--Q.89 -> Code that displays MOVIE_TITLE, MOVIE_YEAR, PRICE_DESCRIPTION
-- PRICE_RENTFEE and MOVIE_GENRE for all Family, Comedy, or Drama movies
Select MOVIE.MOVIE_TITLE, MOVIE.MOVIE_YEAR, PRICE.PRICE_DESCRIPTION,
PRICE.PRICE_RENTFEE, MOVIE.MOVIE_GENRE
FROM MOVIE
INNER JOIN PRICE ON MOVIE.PRICE_CODE = PRICE.PRICE_CODE
WHERE MOVIE.MOVIE_GENRE = 'Family' or MOVIE.MOVIE_GENRE = 'Comedy'
or MOVIE.MOVIE_GENRE = 'Drama';


--Q.90 -> Code that displays MOVIE_NUM, MOVIE_TITLE, and MOVIE_YEAR
--	for all movies who do not have a video
Select MOVIE.MOVIE_NUM, MOVIE.MOVIE_TITLE, MOVIE.MOVIE_YEAR
FROM MOVIE
LEFT JOIN VIDEO ON VIDEO.MOVIE_NUM = MOVIE.MOVIE_NUM
WHERE VIDEO.MOVIE_NUM IS NULL;


--Q.91 -> Code that displays the MEM_NUM, MEM_FNAME, MEM_LNAME, and
--	MEM_BALANCE of memberships that have a rental
Select DISTINCT MEMBERSHIP.MEM_NUM, MEMBERSHIP.MEM_FNAME, MEMBERSHIP.MEM_LNAME,
MEMBERSHIP.MEM_BALANCE
FROM MEMBERSHIP
INNER JOIN RENTAL ON RENTAL.MEM_NUM = MEMBERSHIP.MEM_NUM
ORDER BY MEMBERSHIP.MEM_NUM ASC;


--Q.92 -> Code to dispay the minimum balance, maximum balance, and
--average for memberships that have a rental
Select DISTINCT MIN(MEMBERSHIP.MEM_BALANCE) as Minimum_Balance,
MAX(MEMBERSHIP.MEM_BALANCE) as Maximum_Balance,
AVG(MEMBERSHIP.MEM_BALANCE) as Average_Balance
FROM MEMBERSHIP
INNER JOIN RENTAL ON RENTAL.MEM_NUM = MEMBERSHIP.MEM_NUM;


--Q.93 -> Code that displays MEM_FNAME and MEM_LNAME concatenated
--	and MEM_STREET, MEM_CITY, MEM_STATE, and MEM_ZIP concatenated
--	separetly.
Select CONCAT(MEM_FNAME, ' ', MEM_LNAME) AS Membership_Name,
CONCAT(MEM_STREET, ', ', MEM_CITY, ', ', MEM_STATE, ' ', MEM_ZIP) 
as Membership_Address FROM MEMBERSHIP;


--Q.94 -> Code that displays RENT_NUM, RENT_DATE, VID_NUM,
--	DETAIL_DUEDATE, and DETAIL_RETURNDATE
Select RENTAL.RENT_NUM, FORMAT(RENT_DATE,N'dd"-"MMM"-"yy', 'en-US') as RENT_DATE,
DETAILRENTAL.VID_NUM, MOVIE.MOVIE_TITLE,
FORMAT(DETAILRENTAL.DETAIL_DUEDATE,N'dd"-"MMM"-"yy', 'en-US') as DETAIL_DUEDATE,
FORMAT(DETAILRENTAL.DETAIL_RETURNDATE,N'dd"-"MMM"-"yy', 'en-US') as DETAIL_RETURNDATE
FROM RENTAL
INNER JOIN DETAILRENTAL ON DETAILRENTAL.RENT_NUM = RENTAL.RENT_NUM
INNER JOIN VIDEO ON VIDEO.VID_NUM = DETAILRENTAL.VID_NUM
INNER JOIN MOVIE ON MOVIE.MOVIE_NUM = VIDEO.MOVIE_NUM
WHERE DETAILRENTAL.DETAIL_RETURNDATE > DETAILRENTAL.DETAIL_DUEDATE
ORDER BY RENTAL.RENT_NUM, MOVIE.MOVIE_TITLE;


--Q.95 -> Code that displays the RENT_NUM, RENT_DATE, VID_NUM, MOVIE_TITLE
--	DETAIL_DUEDATE, DETAIL_RETURNDATE, DETAIL_FEE, and the number of days
--	past the due date that the video was returned for for each video that
--	was returned after the due date
Select RENTAL.RENT_NUM, FORMAT(RENT_DATE,N'dd"-"MMM"-"yy', 'en-US') as RENT_DATE,
DETAILRENTAL.VID_NUM, MOVIE.MOVIE_TITLE,
FORMAT(DETAILRENTAL.DETAIL_DUEDATE,N'dd"-"MMM"-"yy', 'en-US') as DETAIL_DUEDATE,
FORMAT(DETAILRENTAL.DETAIL_RETURNDATE,N'dd"-"MMM"-"yy', 'en-US') as DETAIL_RETURNDATE,
DETAILRENTAL.DETAIL_FEE,
DATEDIFF(day,DETAILRENTAL.DETAIL_DUEDATE, DETAILRENTAL.DETAIL_RETURNDATE) as DAYS_PAST_DUE
FROM RENTAL
INNER JOIN DETAILRENTAL ON DETAILRENTAL.RENT_NUM = RENTAL.RENT_NUM
INNER JOIN VIDEO ON VIDEO.VID_NUM = DETAILRENTAL.VID_NUM
INNER JOIN MOVIE ON MOVIE.MOVIE_NUM = VIDEO.MOVIE_NUM
WHERE DETAILRENTAL.DETAIL_RETURNDATE > DETAILRENTAL.DETAIL_DUEDATE;


--Q.96 -> Code that displays the RENT_NUM, RENT_DATE, MOVIE_TITLE, and
--	DETAIL_FEE for movies that was returned on or before the due date
Select RENTAL.RENT_NUM, FORMAT(RENTAL.RENT_DATE,N'dd"-"MMM"-"yy', 'en-US') as RENT_DATE,
MOVIE.MOVIE_TITLE, DETAILRENTAL.DETAIL_FEE
FROM RENTAL
INNER JOIN DETAILRENTAL ON DETAILRENTAL.RENT_NUM = RENTAL.RENT_NUM
INNER JOIN VIDEO ON VIDEO.VID_NUM = DETAILRENTAL.VID_NUM
INNER JOIN MOVIE ON MOVIE.MOVIE_NUM = VIDEO.MOVIE_NUM
WHERE DETAILRENTAL.DETAIL_RETURNDATE <= DETAILRENTAL.DETAIL_DUEDATE;


--Q.97 -> Code that displays MEM_NUM, MEM_LNAME, MEM_FNAME, and the sum
--	of all the detail fees from all movies that the membership has rented
Select MEMBERSHIP.MEM_NUM, MEMBERSHIP.MEM_LNAME, MEMBERSHIP.MEM_FNAME,
SUM(DETAILRENTAL.DETAIL_FEE) as RENTAL_FEE_REVENUE 
FROM DETAILRENTAL
INNER JOIN RENTAL ON RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM
INNER JOIN MEMBERSHIP ON MEMBERSHIP.MEM_NUM = RENTAL.MEM_NUM
GROUP BY MEMBERSHIP.MEM_NUM, MEMBERSHIP.MEM_LNAME, MEMBERSHIP.MEM_FNAME;


--Q.98 -> Code that displays the MOVIE_NUM, MOVIE_GENRE, 
--	average movie cost of movies in the genre, MOVIE_COST,and percentage
--	difference between the average movie cost and individual movie cost
WITH GENRE_GROUP AS (SELECT MOVIE_GENRE, FORMAT((AVG(MOVIE_COST)),'N2') as AVERAGE_COST
FROM MOVIE
GROUP BY MOVIE_GENRE)

SELECT MOVIE.MOVIE_NUM, MOVIE.MOVIE_GENRE, GENRE_GROUP.AVERAGE_COST,
MOVIE.MOVIE_COST, FORMAT((((MOVIE_COST-GENRE_GROUP.AVERAGE_COST)/GENRE_GROUP.AVERAGE_COST)*100),'N2') as PERCENT_DIFFERENCE
FROM MOVIE
INNER JOIN GENRE_GROUP ON GENRE_GROUP.MOVIE_GENRE = MOVIE.MOVIE_GENRE
ORDER BY  MOVIE.MOVIE_NUM