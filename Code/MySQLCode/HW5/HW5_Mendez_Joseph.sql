/*
Name - Joseph Mendez
UTSA ID - qxo307
Course - IS.6503.001
*/

/* Question 20
Oracle sequence that genreates values for customer numbers; starts at customer number 2000
*/
CREATE TABLE CUSTOMER (
CUST_NUM INT IDENTITY(2000, 1) PRIMARY KEY,
CUST_LNAME VARCHAR(30),
CUST_FNAME VARCHAR(30),
CUST_BALANCE DECIMAL(8,2));

SET IDENTITY_INSERT CUSTOMER ON
INSERT INTO CUSTOMER (CUST_NUM, CUST_LNAME, CUST_FNAME, CUST_BALANCE) VALUES (1000, 'Smith', 'Jeanne', 1050.11);
INSERT INTO CUSTOMER (CUST_NUM, CUST_LNAME, CUST_FNAME, CUST_BALANCE) VALUES (1001, 'Ortega', 'Juan', 840.92);
SET IDENTITY_INSERT CUSTOMER OFF
--SELECT * FROM CUSTOMER;


/* Question 21
Oracle sequence that genreates values for invoice numbers; starts at invoice number 9000
*/
CREATE TABLE INVOICE (
INV_NUM INT IDENTITY(9000, 1) PRIMARY KEY,
CUST_NUM INTEGER,
INV_DATE DATE,
INV_AMOUNT DECIMAL(10,2),
FOREIGN KEY (CUST_NUM) REFERENCES CUSTOMER(CUST_NUM));

SET IDENTITY_INSERT INVOICE ON
INSERT INTO INVOICE (INV_NUM, CUST_NUM, INV_DATE, INV_AMOUNT) VALUES (8000, 1000, '2016-03-23', 235.89);
INSERT INTO INVOICE (INV_NUM, CUST_NUM, INV_DATE, INV_AMOUNT) VALUES (8001, 1001, '2016-03-23', 312.82);
INSERT INTO INVOICE (INV_NUM, CUST_NUM, INV_DATE, INV_AMOUNT) VALUES (8002, 1001, '2016-03-30', 528.10);
INSERT INTO INVOICE (INV_NUM, CUST_NUM, INV_DATE, INV_AMOUNT) VALUES (8003, 1000, '2016-04-16', 194.78);
INSERT INTO INVOICE (INV_NUM, CUST_NUM, INV_DATE, INV_AMOUNT) VALUES (8004, 1000, '2016-04-23', 619.44);
SET IDENTITY_INSERT INVOICE OFF
--SELECT * FROM INVOICE;


/* Question 22
Query that utilizes the CUST_NUM sequence to add ‘Powers’, ‘Ruth’, 500 values to the CUSTOMER table
*/
INSERT INTO CUSTOMER VALUES('Powers', 'Ruth', 500);
--SELECT * FROM CUSTOMER;


/* Question 23
Query that adds a new column called CUST_DOB into the CUSTOMER table
*/
ALTER TABLE CUSTOMER
ADD CUST_DOB DATE;
--SELECT * FROM CUSTOMER;


/* Question 24
Query that changes the DOB for customer 1000 to March 15, 1989
*/
UPDATE CUSTOMER
SET CUST_DOB = '1989-03-15'
WHERE CUST_NUM = 1000;
--SELECT * FROM CUSTOMER;


/* Question 25
Query that changes the DOB for customer 1001 to December 22, 1988
*/
UPDATE CUSTOMER
SET CUST_DOB = '1988-12-22'
WHERE CUST_NUM = 1001;
--SELECT * FROM CUSTOMER;


/* Question 26
Query that creates a trigger called trg_updatecustbalance which updates
	the CUST_BALANCE column when the INVOICE table is updated
*/

--DROP TRIGGER IF EXISTS trg_updatecustbalance;

CREATE TRIGGER trg_updatecustbalance on INVOICE
AFTER INSERT
AS BEGIN
	UPDATE CUSTOMER
	SET CUST_BALANCE = aggSUB.aggINV_AMOUNT
	FROM (SELECT CUST_NUM, SUM(INV_AMOUNT) as aggINV_AMOUNT FROM INVOICE GROUP BY CUST_NUM) aggSUB, INVOICE I
	INNER JOIN CUSTOMER C on C.CUST_NUM = I.CUST_NUM
	WHERE I.CUST_NUM = C.CUST_NUM
END;
/*
--TEST CODE
SELECT * FROM CUSTOMER;
SELECT * FROM INVOICE;
SET IDENTITY_INSERT INVOICE ON;
INSERT INTO INVOICE (INV_NUM, CUST_NUM, INV_DATE, INV_AMOUNT) VALUES (8005, 1001, '27-APR-18', 225.40);
SET IDENTITY_INSERT INVOICE OFF;
SELECT * FROM CUSTOMER;
SELECT * FROM INVOICE;
*/


/* Question 27
Query that creates a procedure called prc_cust_add a new customer to
	the CUSTOMER table - 1002, 'Rauthor', 'Peter', 0.00
*/

--DROP PROCEDURE prc_cust_add;

CREATE PROCEDURE prc_cust_add 
AS BEGIN
	SET IDENTITY_INSERT CUSTOMER ON
	INSERT INTO CUSTOMER (CUST_NUM, CUST_LNAME, CUST_FNAME, CUST_BALANCE) VALUES (1002, 'Rauthor', 'Peter', 0.00);
	SET IDENTITY_INSERT CUSTOMER OFF
END;
/*
--TEST CODE
SELECT * FROM CUSTOMER;
EXEC prc_cust_add;
SELECT * FROM CUSTOMER;
*/


/* Question 28
Query that creates a procedure called prc_invoice_add that adds a new
	record to the INVOICE table - 8006, 1000, '30-APR-18', 301.72
*/

--DROP PROCEDURE prc_invoice_add;

CREATE PROCEDURE prc_invoice_add
AS BEGIN
	SET IDENTITY_INSERT INVOICE ON
	INSERT INTO INVOICE (INV_NUM, CUST_NUM, INV_DATE, INV_AMOUNT) VALUES (8006, 1000, '30-APR-18', 301.72);
	SET IDENTITY_INSERT INVOICE OFF
END;
/*
--TEST CODE
SELECT * FROM INVOICE;
EXEC prc_invoice_add;
SELECT * FROM INVOICE;

--To undo changes done above
DELETE from INVOICE WHERE INV_NUM = 8006;
*/


/* Question 29
Query that creates a trigger called trg_updatecustbalance2 that 
	updates CUST_BALANCE by substracting the deleted value
*/

--DROP TRIGGER IF EXISTS trg_updatecustbalance2;

CREATE TRIGGER trg_updatecustbalance2 on INVOICE
AFTER DELETE
AS BEGIN
	UPDATE CUSTOMER
	SET CUST_BALANCE = aggSUB.aggINV_AMOUNT
	FROM (SELECT CUST_NUM, SUM(INV_AMOUNT) as aggINV_AMOUNT FROM INVOICE GROUP BY CUST_NUM) aggSUB, INVOICE I
	INNER JOIN CUSTOMER C on C.CUST_NUM = I.CUST_NUM
	WHERE aggSUB.CUST_NUM = C.CUST_NUM
END;
/*
--TEST CODE
SELECT * FROM CUSTOMER;
SELECT * FROM INVOICE;
DELETE FROM INVOICE WHERE INV_NUM = 8002;
SELECT * FROM CUSTOMER;
SELECT * FROM INVOICE;

--To undo changes done above
SET IDENTITY_INSERT INVOICE ON
INSERT INTO INVOICE (INV_NUM, CUST_NUM, INV_DATE, INV_AMOUNT) VALUES (8002, 1001, '2016-03-30', 528.10);
SET IDENTITY_INSERT INVOICE OFF
SELECT * FROM CUSTOMER;
*/


/* Question 30
Query that creates a procedure called prc_inv_delete which deletes 
	an invoice based on a given INV_NUM parameter
*/

--DROP PROCEDURE prc_inv_delete;

CREATE PROCEDURE prc_inv_delete @INV_NUM INT AS
DELETE FROM INVOICE WHERE INV_NUM = @INV_NUM;
/*
--TEST CODE
SELECT * FROM INVOICE;
EXEC prc_inv_delete @INV_NUM = '8005';
EXEC prc_inv_delete @INV_NUM = '8006';
SELECT * FROM INVOICE;

--To undo changes done above
SELECT * FROM INVOICE;
SET IDENTITY_INSERT INVOICE ON;
INSERT INTO INVOICE (INV_NUM, CUST_NUM, INV_DATE, INV_AMOUNT) VALUES (8005, 1001, '27-APR-18', 225.40);
EXEC prc_invoice_add;
SET IDENTITY_INSERT INVOICE ON;
SELECT * FROM INVOICE;
*/


/* Question 31
Query that creates a trigger called trg_line_total that writes the
	LINE_TOTAL value in the LINE table every time a new row is added
*/

--DROP TRIGGER IF EXISTS trg_line_total;

CREATE TRIGGER trg_line_total on LINE
AFTER INSERT
AS BEGIN
	UPDATE LINE
	SET LINE_TOTAL = LINE_UNITS * LINE_PRICE
	FROM LINE
END;
/*
--TEST CODE
SELECT * FROM LINE;
INSERT INTO LINE VALUES(1008,4,'54778-2T',3,   10.95,   9.95);
SELECT * FROM LINE;

--To undo changes done above
SELECT * FROM LINE;
DELETE FROM LINE WHERE INV_NUMERIC = '1008' AND LINE_NUMERIC = '4'
SELECT * FROM LINE;
*/


/* Question 32
Query that creates a trigger called trg_line_prod that automatically
	updates P_QOH in the PRODUCT table after a new entry in the LINE
	table is added
*/

--DROP TRIGGER IF EXISTS trg_line_prod;

CREATE TRIGGER trg_line_prod on LINE
AFTER INSERT
AS BEGIN
	UPDATE PRODUCT
	SET P_QOH = P_QOH - newLine.sumLINE
	FROM (SELECT P_CODE, SUM(LINE_UNITS) sumLINE FROM inserted GROUP BY P_CODE) newLine, PRODUCT P
	INNER JOIN LINE L on L.P_CODE = P.P_CODE
	WHERE newLine.P_CODE = P.P_CODE
END;
/*
--TEST CODE
SELECT * FROM PRODUCT;
INSERT INTO LINE VALUES(1008,5,'89-WRE-Q',3,   256.99, NULL);
SELECT * FROM PRODUCT;
*/


/* Question 33
Query that creates a process called prc_inv_amounts that updates the
	INV_SUBTOTAL, INV_TAX, and INV_TOTAL.
*/

--DROP PROCEDURE prc_inv_amounts;

CREATE PROCEDURE prc_inv_amounts @INV_NUM2 INT
AS BEGIN
	UPDATE INVOICE
	SET INV_SUBTOTAL = aggSUBTOTAL.sumLineTotal
	FROM (SELECT I.INV_NUMERIC, SUM(L.LINE_TOTAL) as sumLineTotal FROM INVOICE I
		INNER JOIN LINE L on L.INV_NUMERIC = I.INV_NUMERIC
		WHERE @INV_NUM2 = I.INV_NUMERIC
		GROUP BY I.INV_NUMERIC) aggSUBTOTAL, INVOICE I2
	WHERE @INV_NUM2 = I2.INV_NUMERIC

	UPDATE INVOICE
	SET INV_TAX = INV_SUBTOTAL * 0.008
	WHERE @INV_NUM2 = INV_NUMERIC

	UPDATE INVOICE
	SET INV_TOTAL = INV_SUBTOTAL + INV_TAX
	WHERE @INV_NUM2	= INV_NUMERIC
END;
/*
--TEST CODE
SELECT * FROM INVOICE;
EXEC prc_inv_amounts @INV_NUM2 = 1008;
SELECT * FROM INVOICE;
*/


/* Question 34
Query that creates a procedure named prc_cus_balance_update 
	that updates the customer balance with the INV_TOTAL
*/

--DROP PROCEDURE prc_cus_balance_update;

CREATE PROCEDURE prc_cus_balance_update @INV_NUM3 INT
AS BEGIN
	UPDATE CUSTOMER
	SET CUS_BALANCE = CUS_BALANCE + aggINV_TABLE.sumINV_TOT
	FROM (SELECT CUS_CODE, SUM(INV_TOTAL) sumINV_TOT FROM INVOICE
		WHERE @INV_NUM3 = INV_NUMERIC 
		GROUP BY CUS_CODE) aggINV_TABLE,
	CUSTOMER C
	INNER JOIN INVOICE I3 on I3.CUS_CODE = C.CUS_CODE
	WHERE @INV_NUM3 = I3.INV_NUMERIC
END;
/*
--TEST CODE
SELECT * FROM CUSTOMER;
EXEC prc_cus_balance_update @INV_NUM3 = 1008;
SELECT * FROM CUSTOMER;
*/